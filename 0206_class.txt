# 라이브 강의
# delta
di = [0,1,0,-1] #행
dj = [1,0,-1,0] #열
# 첫번째 방법
N = 3
for i in range(N):
    for j in range(N):
        for k in range(4):
            ni, nj = i+di[k],j+dj[k]
            if 0 <= ni < N and 0  <= nj < N:
                print(i,j,ni,nj)
# 두번째 방법
N = 3
for i in range(N):
    for j in range(N):
        for di, dj in [[0,1],[1,0],[0,-1],[-1,0]]:
            ni, nj = i+di, j+dj
            if 0 <= ni < N and 0 <= nj < N:
                print(i, j, ni, nj)
# 세번째 방법
di = [0,1,0,-1] #행
dj = [1,0,-1,0] #열
N = 3
P = 3
for i in range(N):
    for j in range(N):
        for k in range(4):
            for l in range(1,P+1):
                ni = i + di[k] * l
                nj = j + dj[k] * l
                if 0 <= ni < N and 0 <= nj < N:
                    print(i, j, ni, nj)

# ====================================================================

# subset(부분집합)
A = [1,2,3,4]
bit = [0]*4
for i in range(2):
    bit[0] = i
    for j in range(2):
        bit[1] = j
        for k in range(2):
            bit[2] = k
            for l in range(2):
                bit[3] = l
                print(bit)
                for p in range(4):
                    if bit[p]:
                        print(A[p],end=' ')
                print()

# 부분집합(비트연산자)
arr = [3,6,7,1,5,4]

n = len(arr)

for i in range(1<<n):  # 1<<n : 부분 집합의 개수
    for j in range(n): # 원소의 수만큼 비트를 비교함
        if i & (1<<j): # i의 j번 비트가 1인경우
            print(arr[j], end=', ') # j번 원소 출력
    print()
print()

# ====================================================================

# 반 강의
# 이 모양으로 땅을 갖을 수 있다고 할때 어느 땅을 갖어야 할까요?
#  2*3 배열만큼 잘라서 합을 구할떄 최대값은 몇 일까요?
#  ***
#  ***
arr = [[1,5,4,2],[1,3,4,2],[3,5,3,2],[2,6,4,1]]
maxvalue = -21e8
def getsum(a,b):
    sum = 0
    for i in range(2):
        for j in range(3):
            sum += arr[a+i][b+j]
    return sum

for i in range(3):
    for j in range(2):
        result = getsum(i,j)
        if result > maxvalue:
            maxvalue = result
print(maxvalue)

# ====================================================================

# direct 배열을 할용하기
# 방향 배열을 활용하기
#델타 배열을 활용하기
# -> 다 같은 말

# 기준좌표 (1,1) 위,아래,좌,우 값 더하기

# 일반 방법
lst = [[3,5,4],[1,1,2],[1,3,9]]
sum = lst[0][1] + lst[2][1] + lst[1][0] + lst[1][2]
print(sum)

# direct 배열
lst = [[3,5,4],[1,1,2],[1,3,9]]
direct_i = [0,0,-1,1]
direct_j = [-1,1,0,0]
y,x = map(int,input().split())
sum = 0
for i in range(4):
    di = y + direct_i[i]
    dj = x + direct_j[i]
    if 0 <= di < 3 and 0 <= dj < 3:
        sum += lst[di][dj]
print(sum)

# 좌표값 하나 입력 받고 입력받은 좌표로부터 대각선에 있는 곳의 값들의 곱 출력
arr = [ [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8],
        [1, 2, 9, 1, 2],
        [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8]]

direct_i = [-1,-1,1,1]
direct_j = [-1,1,1,-1]
y,x = map(int,input().split())
result = 1
for i in range(4):
    di = y + direct_i[i]
    dj = x + direct_j[i]
    if 0 <= di < 5 and 0 <= dj < 5:
        result *= arr[di][dj]
print(result)

# 위 아래 두개씩 더하기
# 첫번째 방법
arr = [ [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8],
        [1, 2, 9, 1, 2],
        [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8]]

direct_i = [-1,-2,1,2,0,0,0,0]
direct_j = [0,0,0,0,-1,-2,1,2]
y, x = map(int,input().split())
sum = 0
for i in range(8):
    di = y + direct_i[i]
    dj = x + direct_j[i]
    if 0 <= di < 5 and 0 <= dj < 5:
        sum += arr[di][dj]
print(sum)

#두번째 방법
arr = [ [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8],
        [1, 2, 9, 1, 2],
        [3, 5, 4, 5, 6],
        [1, 1, 2, 7, 8]]
y, x = map(int,input().split())
direct_i = [-1,0,1,0]
direct_j = [0,1,0,-1]
sum = 0
for i in range(4):
    for j in range(1,3):     #두칸 출력
        di = y + direct_i[i] * j
        dj = x + direct_j[i] * j
        if 0 <= di <= 4 and 0 <= dj <= 4:
            sum += arr[di][dj]
print(sum)

# ====================================================================

# 비트연산자
# 정수값 10을 이진수로 표현하기
a = 10
print(bin(a)) # 이진수 출력 / 0b1010으로 출력됨 / 0b가 이진수를 나타냄

# 2진수의 값을 정수로 표현하기
b = 0B1111
print(b) # 정수로 바로 나옴 / 15 출력됨

# 2진수(문자) 값을 정수로 출력하기
c = '0B1111'
print(int(c,2)) # ,2가 2진수로 출력하겠다는 의미

# 비트 연산할 때
# 1. and 연산 (둘 다 참(1))
# 0001(1) 1001(9) - > (1&9) = (0001)
a = 0b0001
b = 0b1001
print(a&b)

# 2. or 연산 (둘 중 하나만 참(1)
a = 0b0001
b = 0b1001
print(a|b)

# 3. shift 연산
a = 0b0011
b = 0b00101001 #(41)
print(a<<2) # a를 좌측으로 2칸 민다는 의미 (0011 -> 1100)
print(b<<3) # b를 좌측으로 3칸 민다는 의미 (00101001 -> 0001 0100 1000)
print(a>>1) # a를 우측으로 1칸 민다는 의미 (0011 -> 0001)
print(b>>3) # b를 우측으로 3칸 민다는 의미 (00101001 -> 0101)

# ====================================================================

# 위 아래 좌우 좌표들의 합이 가장 큰 곳의 합과 그 기준 좌표값을 출력
arr=[[1,2,3,4],
     [1,2,9,4],
     [1,9,3,9],
     [1,2,9,4]]

def getsum(a,b):
    direct_i = [-1, 0, 1, 0]
    direct_j = [0, 1, 0, -1]
    sum = 0
    for i in range(4):
        di = a + direct_i[i]
        dj = b + direct_j[i]
        if 0 < di < 4 and 0 < dj < 4:
            sum += arr[di][dj]
    return sum
maxvalue = -21e8
maxi = 0
maxj = 0
for i in range(4):
    for j in range(4):
        result = getsum(i,j)
        if result > maxvalue:
            maxvalue = result
            maxi = i
            maxj = j
print(maxvalue, maxi, maxj)