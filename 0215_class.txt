# 반 강의

# 숫자 하나씩 선택하여 합이 20이 넘는 경우 몇가지인지 출력
arr = [[4,5,2],[-2,1,6],[3,9,-4],[3,5,2]]
count = 0
def abc(level,sum):
    global count
    if level == 4:
        if sum > 20:
            count += 1
        return
    for i in range(3):
        abc(level+1,sum+arr[level][i])
abc(0,0)
print(count)

---------------------------------------------------------------------

# 숫자 하나씩 선택하여 곱했을 때 최댓값 출력
arr = [[3,5,9],[7,-8,1],[-10,2,3],[5,1,2]]
maxvalue = -21e8
def dfs(level,gop):
    global maxvalue
    if level == 4:
        if gop > maxvalue:
            maxvalue = gop
        return
    for i in range(3):
        dfs(level+1,gop*arr[level][i])
dfs(0,1)
print(maxvalue)

---------------------------------------------------------------------

# 합이 30보다 큰 경우가 몇가지인지 출력
arr = [[3,5,9,6],[7,-8,1,6],[-10,2,3,9],[5,1,2,8],[4,7,1,8]]
count = 0
def dfs(now,level,sum):
    global count
    if level == 5:
        if sum > 30:
            count += 1
        return

    for i in range(3):
        direct = [-1,0,1]
        dy = level
        dx = now + direct[i]
        if 0 <= dx < 4:
            dfs(dx,level + 1, sum + arr[dy][dx])
for i in range(4):
    dfs(i,1,arr[0][i])
print(count)

---------------------------------------------------------------------

# 미로찾기
# (0,0)에서 출발해서 (3,3)까지 도착하고자 할 때 목표에 도착이 가능한지 불가능한지 출력
arr = [[0,0,0,0],
       [1,0,1,0],
       [1,0,1,0],
       [0,0,0,0]]
used = [[0]*4 for _ in range(4)]
direct_i = [-1,1,0,0]
direct_j = [0,0,-1,1]
flag = 0
def dfs(y,x):
    global flag
    if y == 3 and x == 3:
        flag = 1
        return
    for i in range(4):
        di = y + direct_i[i]
        dj = x + direct_j[i]
        if 0 <= di < 4 and 0 <= dj < 4:
            if arr[di][dj] == 1:
                continue
            if used[di][dj] == 1:
                continue
            used[di][dj] = 1
            dfs(di,dj)
            if flag == 1:
                return
used[0][0] = 1
dfs(0,0)
if flag == 1:
    print('도착 가능')
else:
    print('도착 불가능')

arr = [[0, 0, 0, 0],
       [1, 0, 1, 0],
       [1, 0, 1, 0],
       [0, 0, 0, 0]]
used = [[0]*4 for _ in range(4)]
direct_i = [-1,1,0,0]
direct_j = [0,0,-1,1]
flag = 0
def dfs(y,x):
    global flag
    if y == 3 and x == 3:
        flag = 1
        return
    for i in range(4):
        di = y + direct_i[i]
        dj = x + direct_j[i]
        if 0 <= di < 4 and 0 <= dj < 4:
            if arr[di][dj] == 1:
                continue
            if used[di][dj] == 0:
                used[di][dj] = 1
                dfs(di,dj)
used[0][0] = 1
dfs(0,0)
if flag == 1:
    print('도착 가능')
else:
    print('도착 불가능')

---------------------------------------------------------------------
# 별(1,3)까지 가는 최단 거리 출력

# 1. level을 사용해서 풀기
arr = [[0, 0, 0, 0, 1],
       [1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1],
       [0, 0, 0, 0, 0]]
used = [[0]*5 for _ in range(5)]
direct_i = [-1,1,0,0]
direct_j = [0,0,-1,1]
minvalue = 21e8
def dfs(y,x,level):  # count대신 level로 최단 경로를 구하면 됨
    global minvalue
    if y == 1 and x == 3:
        if minvalue > level:
            minvalue = level
        return
    for i in range(4):
        di = y + direct_i[i]
        dj = x + direct_j[i]
        if 0 <= di < 5 and 0 <= dj < 5:
            if arr[di][dj] == 1:
                continue
            if used[di][dj] == 0:
                used[di][dj] = 1
                dfs(di,dj,level+1)
                used[di][dj] = 0
used[0][0] = 1
dfs(0,0,0)
print(minvalue)

# 2. count를 사용해서 풀기
arr = [[0, 0, 0, 0, 1],
       [1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1],
       [1, 0, 1, 0, 1],
       [0, 0, 0, 0, 0]]
used = [[0]*5 for _ in range(5)]
direct_i = [-1,1,0,0]
direct_j = [0,0,-1,1]
minvalue = 21e8
count = 0
def dfs(y,x):
    global minvalue,count
    if y == 1 and x == 3:
        if minvalue > count:
            minvalue = count
        return
    for i in range(4):
        di = y + direct_i[i]
        dj = x + direct_j[i]
        if 0 <= di < 5 and 0 <= dj < 5:
            if arr[di][dj] == 1:
                continue
            if used[di][dj] == 0:
                used[di][dj] = 1
                count += 1
                dfs(di,dj)
                used[di][dj] = 0
                count -= 1
used[0][0] = 1
dfs(0,0)
print(minvalue)
