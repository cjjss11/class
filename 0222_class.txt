반 강의

Union Find
배열의 값이 0인 것은 속한 그룹의 보스를 의미
두 문자를 입력 받고 두 문자가 같은 그룹인지 아닌지 확인
arr = [0]*200
def findboss(member): # boss 찾기
    if arr[ord(member)] == 0: # 0이라는 것은 자기 자신이 보스라는 것을 의미
        return member
    else:
        ret = findboss(arr[ord(member)])
        return ret
def setunion(a,b):
    fa = findboss(a)
    fb = findboss(b)
    if fa == fb: # 각각의 보스를 확인했는데 보스가 같으면 같은 그룹
        return
    else:
        arr[ord(fb)] = fa

setunion('a','b')
setunion('d','e')
setunion('b','e')
setunion('b','d')
setunion('e','f')
st1,st2 = input().split()
if findboss(st1) == findboss(st2):
    print('같은 그룹')
else:
    print('다른 그룹')

양방향 그래프에서 사이클 발생 여부 확인
정수 n 입력 하고 n개의 간선의 정보 입력한 후 cycle 발생 여부 출력
n = int(input())  # 간선의 정보 4개 입력
edge = []
arr = [0]*200
for _ in range(n):
    edge.append(input().split())    # a b # b c # b e # c e (cycle 발생)
                                    # a b # b c # b e # c d (cycle 미발생)
def findboss(member):
    if arr[ord(member)] == 0:
        return member
    else:
        ret = findboss(arr[ord(member)])
        arr[ord(member)] = ret # 경로 단축
        return ret
def union(a,b):
    fa = findboss(a)
    fb = findboss(b)
    if fa == fb:
        return 1
    else:
        arr[ord(fb)] = fa
answer = '미발견'
for i in range(n):
    a,b = edge[i]
    ret = union(a,b)
    if ret == 1:
        answer = '발견'
        break
print(answer)