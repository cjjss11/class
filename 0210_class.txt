라이브 강의

13680 (어디에 단어가 들어갈 수 있을까)
끝에 경계선을 만들기 위해 0을 넣는다
매 라인별로 체크한다

def count(arr):
    ans = 0
    for lst in arr:
        cnt = 0
        for n in lst:
            if n == 1: # 단어를 넣을 수 있는 공백
                cnt += 1
            else:
                if cnt == K:
                    ans += 1
                cnt = 0
    return ans
arr = [list(map(int,input().split())) + [0] for _ in range(N)] + [[0]*(N+1)]
# arr와 arr_t로 각각 개수를 계산
arr_t = list(zip(*arr))
ans = count(arr) + count(arr_t)

====================================================================

13681 (스도쿠 검증)
중복 없이 해주는 set을 사용
arr를 한줄씩 꺼내서 리스트로 사용
3x3 시작점을 기준으로 슬라이싱해서 해결

def solve(arr):
    for lst in arr: # 행을 체크
        if len(set(lst)) != 9: #스도쿠 실패
            return 0
    arr_t = list(zip(*arr)) # 열을 체크
    for lst in arr_t:
        if len(set(lst)) != 0:
            return 0
    for i in (0,3,6):
        for j in (0,3,6): # 3x3 격자
            lst = arr[i][j:j+3] + arr[i+1][j:j+3] + arr[i+2][j:j+3]
            if len(set(lst)) != 9:
                return 0
    return 1 # 스도쿠 성공

====================================================================

반 강의

누적합 출력하기
3 7 12 13 19 28 19 13 12 7 3
전역변수 사용
arr = [3,4,5,1,6,9]
sum = arr[0]
def abc(level):
    global sum
    print(sum,end=' ')
    if level == 5:
        return
    sum += arr[level+1]
    abc(level+1)
    sum -= arr[level+1]
    print(sum,end=' ')
abc(0)

매개변수 사용
arr = [3,4,5,1,6,9]
def abc(level,sum):
    print(sum,end=' ')
    if level == 5:
        return
    abc(level+1,sum+arr[level+1])
    print(sum,end=' ')
abc(0,arr[0])

# ---------------------------------------------------------------------
개구리 시작점은 0번 인덱스
인덱스에 해당하는 값만큼 점프
arr = [2,0,1,1,3,5,1]
def abc(level):
    if level >= len(arr):
        return
    abc(level+arr[level])
    print(arr[level],end=' ')
abc(0)
---------------------------------------------------------------------
4장의 카드에서 한장씩 3장을 뽑아서 누적합
매개변수 사용
arr = [3,7,1,2]
def abc(level,sum):
    if level == 3:
        print(sum,end=' ')
        return
    for i in range(4):
        abc(level+1,sum + arr[i])
abc(0,0)

전역변수 사용
arr = [3,7,1,2]
sum = 0
def abc(level):
    global sum

    if level == 3:
        print(sum,end=' ')
        return
    for i in range(4):
        sum += arr[i]
        abc(level+1)
        sum -= arr[i]
abc(0)
---------------------------------------------------------------------
n개의 카드 묶음에서 각각 한장씩 뽑아서 더했을 때 합이 20이 넘는 경우는 몇가지
arr = [2,7,1,4,3]
n = int(input())
count = 0
def abc(level,sum):
    global count
    # 다시 이해하기
    # 백트랙킹(리턴 조건만 적어서 탐색)
    if sum > 20:
        count += 1
        return
    # 완전 탐색
    if level == n:
        if sum > 20:
            count += 1
        return
    for i in range(5):
        abc(level+1,sum+arr[i])
abc(0,0)
print(count)
---------------------------------------------------------------------
그리디는 큰 값을 먼저 사용

거스름돈 재귀
changes = int(input())
coin = [110,70,10]
minvalue = 21e8
def abc(level,changes):
    global minvalue
    if changes < 0:
        return
    if changes == 0:
        if level <minvalue:  # 최소레벨
            minvalue = level
            return
    for i in range(3):
        abc(level+1,changes-coin[i])
abc(0,changes)
print(minvalue)
---------------------------------------------------------------------
중복 순열
path = ['']*4
arr = ['A','B','C']
def abc(level):
    if level == 2:
        for i in range(level):
            print(path[i],end=' ')
        print()
        #print(*path)
        return
    for i in range(3):
        path[level] = arr[i]
        abc(level+1)
        #path[level] = 0
abc(0)
---------------------------------------------------------------------
주사위 던졌을 때 나올 수 있는 경우의 수
num = int(input())
path = [0]*num
arr = [1,2,3,4,5,6]
def dice(level):

    if level == num: # 주사위 개수가 level
        for i in range(num):
            print(path[i],end=' ')
        print()
        return

    for i in range(6):
        path[level] = arr[i]
        dice(level+1)
        #path[level] = 0
dice(0)